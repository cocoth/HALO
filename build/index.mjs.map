{"version":3,"sources":["../src/core/agent.ts","../src/utils/logger.ts","../src/utils/colors.ts","../src/utils/time.ts","../src/lib/iof.ts","../src/utils/mimeType.ts","../src/core/tools.ts","../src/utils/hash.ts","../src/utils/terminal.ts"],"sourcesContent":["import { Logger } from \"@/utils/logger\";\r\nimport { createOpenAI, openai } from \"@ai-sdk/openai\";\r\nimport {\r\n  CoreMessage,\r\n  generateObject,\r\n  generateText,\r\n  LanguageModelV1,\r\n  streamText,\r\n  ToolSet,\r\n} from \"ai\";\r\nimport { z } from \"zod\";\r\nimport { IOF } from \"@/lib/iof\";\r\nimport { createGoogleGenerativeAI, google } from \"@ai-sdk/google\";\r\nimport { TaskHandler } from \"@/core/tools\";\r\nimport type { InlineData, LooseToStrict, StartChatResult, UserBase } from \"@/types\";\r\n\r\ntype ModelID = Parameters<typeof google | typeof openai>[0]\r\n\r\n\r\ninterface AiAgentConfig {\r\n  /**\r\n   * The URL of the AI agent service.\r\n   * This is required to connect to the AI service.\r\n   */\r\n  agentUrl: string;\r\n  /**\r\n   * The API key for the AI agent.\r\n   * This is required to authenticate requests to the AI service.\r\n   */\r\n  apiKey: string;\r\n  /**\r\n   * The file path to the system prompt.\r\n   * If not provided, the system prompt will be empty.\r\n   */\r\n  systemPromptFile?: string;\r\n  /**\r\n   * The method to use for streaming responses.\r\n   * Can be \"stream\" for streaming responses or \"text\" for text responses.\r\n   * Default is \"text\".\r\n   */\r\n  streamMethod?: \"text\" | \"stream\";\r\n  /**\r\n   * The model ID to use for the AI agent.\r\n   * It can be a Google Gemini model (e.g., \"gemini-1.5-flash\") or an OpenAI model (e.g., \"gpt-4o\").\r\n   * If not provided, defaults to \"gpt-4o\".\r\n   */\r\n  model?: LooseToStrict<ModelID>\r\n  /**\r\n   * A set of tools that the AI agent can use to perform specific tasks.\r\n   * These tools can be used to interact with external services or perform actions.\r\n   * The tools are defined using the `tool` function from the `ai` library.\r\n   */\r\n  tools?: ToolSet\r\n}\r\n\r\n/**\r\n * AiAgent class for interacting with an AI agent via OpenAI API.\r\n * It initializes the agent with a URL and API key, and allows starting a chat session.\r\n * The system prompt can be loaded from a specified file.\r\n */\r\nexport class AiAgent {\r\n  /**\r\n   * The schema for validating the AI agent configuration.\r\n   * It ensures that the required fields are present and correctly formatted.\r\n   */\r\n  private aiAgentSchema = z.object({\r\n    agentUrl: z.string().min(1, \"Agent URL is required\"),\r\n    apiKey: z.string().min(1, \"API key is required\"),\r\n    systemPromptFile: z.string().optional(),\r\n    streamMethod: z.enum([\"stream\", \"text\"]).optional(),\r\n    model: z\r\n      .union([\r\n        z.string().refine((val) => val.startsWith(\"gpt-\"), {\r\n          message: \"Invalid OpenAI model ID\",\r\n        }),\r\n        z.string().refine((val) => val.startsWith(\"gemini-\"), {\r\n          message: \"Invalid Google model ID\",\r\n        }),\r\n      ])\r\n      .optional(),\r\n    saveSession: z.boolean().optional(),\r\n    tools: z.record(z.any()).optional() as z.ZodType<ToolSet>\r\n  });\r\n\r\n  private aiAgentUrl: string;\r\n  private apiKey: string;\r\n  private systemPromptFile?: string;\r\n  private streamMethod: \"text\" | \"stream\" = \"text\";\r\n  private model: LanguageModelV1;\r\n  private toolSet: ToolSet = {\r\n    getCurrentTime: TaskHandler.getCurrentTime\r\n  };\r\n\r\n  constructor(config: AiAgentConfig) {\r\n    try {\r\n      const parsedConfig = this.aiAgentSchema.parse(config);\r\n      this.aiAgentUrl = parsedConfig.agentUrl;\r\n      this.apiKey = parsedConfig.apiKey;\r\n      this.systemPromptFile = parsedConfig.systemPromptFile;\r\n      this.streamMethod = parsedConfig.streamMethod || \"text\";\r\n\r\n      if (!this.aiAgentUrl || !this.apiKey) {\r\n        throw new Error(\"Agent URL and API key are required.\");\r\n      }\r\n      this.model = this.init({\r\n        model: parsedConfig.model as LooseToStrict<ModelID>\r\n      });\r\n\r\n      if (parsedConfig.tools) {\r\n        this.toolSet = {\r\n          getCurrentTime: TaskHandler.getCurrentTime,\r\n          ...parsedConfig.tools\r\n        };\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`Invalid configuration: ${error}`);\r\n    }\r\n  }\r\n\r\n  private init({\r\n    model,\r\n  }: {\r\n    model?: LooseToStrict<ModelID>\r\n  }): LanguageModelV1 {\r\n    if (model?.startsWith(\"gemini-\")) {\r\n      const googleModel = createGoogleGenerativeAI({\r\n        apiKey: this.apiKey,\r\n        baseURL: this.aiAgentUrl,\r\n      });\r\n      return googleModel(model);\r\n    } else if (model?.startsWith(\"gpt-\")) {\r\n      const openAIModel = createOpenAI({\r\n        baseURL: this.aiAgentUrl,\r\n        apiKey: this.apiKey,\r\n        compatibility: \"strict\",\r\n      });\r\n      return openAIModel(model);\r\n    }\r\n    const openAIModel = createOpenAI({\r\n      baseURL: this.aiAgentUrl,\r\n      apiKey: this.apiKey,\r\n      compatibility: \"strict\",\r\n    });\r\n    return openAIModel(\"gpt-4o\");\r\n  }\r\n\r\n  /**\r\n   * Loads the system prompt from a specified file.\r\n   * If the file is not found or empty, it throws an error.\r\n   */\r\n  private async systemPrompt(): Promise<string> {\r\n    if (!this.systemPromptFile) {\r\n      return \"\";\r\n    }\r\n    const system = await IOF.readTextFile(this.systemPromptFile);\r\n    if (!system) {\r\n      throw new Error(\"System prompt file not found or empty.\");\r\n    }\r\n    return system;\r\n  }\r\n\r\n  /**\r\n   * Retrieves user information based on the provided user base.\r\n   * This method can be extended to fetch user details from a database or an API.\r\n   */\r\n  private async getUserInfo(userData: UserBase): Promise<string> {\r\n    const greetingName = `Hai My Username Is: ${userData.username || userData.name || \"\"}, `;\r\n    const greetingPhone = `My Phone Number Is: ${userData.phone || \"\"}. \\n`;\r\n\r\n    return greetingName + greetingPhone;\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates a stream of text responses based on the provided messages.\r\n   * It uses the AI agent's model and system prompt to generate the responses.\r\n   * If tools are defined, it will use them in the generation process.\r\n   *\r\n   * @param messages - An optional array of CoreMessage objects representing the conversation history.\r\n   * @param prompt - An optional prompt string to start the conversation.\r\n   * @returns A stream of text responses generated by the AI agent.\r\n   */\r\n  private async generateText({ messages, prompt }: { messages?: CoreMessage[]; prompt?: string; }) {\r\n    if (prompt && typeof prompt !== \"string\") {\r\n      throw new Error(\"Prompt must be a string.\");\r\n    }\r\n    if (messages && !Array.isArray(messages)) {\r\n      throw new Error(\"Messages must be an array of CoreMessage.\");\r\n    }\r\n\r\n    if (prompt) {\r\n      return await generateText({\r\n        model: this.model,\r\n        system: await this.systemPrompt(),\r\n        tools: Object.keys(this.toolSet).length > 0 ? this.toolSet : undefined,\r\n        maxSteps: Object.keys(this.toolSet).length > 0 ? Number.MAX_SAFE_INTEGER : undefined,\r\n        prompt,\r\n        // toolChoice: Object.keys(this.toolSet).length > 0 ? \"required\" : \"auto\"\r\n      });\r\n    }\r\n    return await generateText({\r\n      model: this.model,\r\n      system: await this.systemPrompt(),\r\n      tools: Object.keys(this.toolSet).length > 0 ? this.toolSet : undefined,\r\n      maxSteps: Object.keys(this.toolSet).length > 0 ? Number.MAX_SAFE_INTEGER : undefined,\r\n      // toolChoice: Object.keys(this.toolSet).length > 0 ? \"required\" : \"required\",\r\n      messages,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generates a text stream based on the provided messages.\r\n   * This method is used for streaming responses from the AI agent.\r\n   * It uses the `streamText` function from the `ai` library.\r\n   *\r\n   * @param messages - An array of CoreMessage objects representing the conversation history.\r\n   * @returns A stream of text responses from the AI agent.\r\n   */\r\n  private async generateStream(messages: CoreMessage[]) {\r\n    return streamText({\r\n      model: this.model,\r\n      system: await this.systemPrompt(),\r\n      tools: Object.keys(this.toolSet).length > 0 ? this.toolSet : undefined,\r\n      maxSteps: Object.keys(this.toolSet).length > 0 ? Number.MAX_SAFE_INTEGER : undefined,\r\n      messages,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts a chat session with the AI agent.\r\n   * It saves the user's message and response to the database.\r\n   * If a session is provided, it continues the conversation with the existing messages.\r\n   * If the prompt is invalid or empty, it throws an error.\r\n   *\r\n   * @param user - The user initiating the chat session.\r\n   * @param session - An optional array of previous messages in the chat session.\r\n   * @param prompt - The user's message to start the chat.\r\n   * @param media - Optional media data to include in the chat.\r\n   * @returns An object containing the text stream, text response, and response object.\r\n   */\r\n  public async startChat({\r\n    user,\r\n    session,\r\n    prompt,\r\n    media,\r\n  }: {\r\n    /**\r\n     * The user initiating the chat session.\r\n     * This can be a user base object containing user details like name and phone number.\r\n     * If not provided, the chat will not include user-specific information.\r\n     */\r\n    user?: UserBase | null;\r\n    /**\r\n     * An optional array of previous messages in the chat session.\r\n     * This allows the AI agent to continue the conversation with the existing context.\r\n     * If not provided, a new chat session will be started.\r\n     */\r\n    session?: CoreMessage[] | null;\r\n    /**\r\n     * The user's message to start the chat.\r\n     * This should be a non-empty string representing the user's input.\r\n     * If the prompt is invalid or empty, an error will be thrown.\r\n     */\r\n    prompt: string;\r\n    /**\r\n     * Optional media data to include in the chat.\r\n     * This can be an inline data object containing file data and mime type.\r\n     * If not provided, the chat will not include any media.\r\n     */\r\n    media?: InlineData | null;\r\n  }): Promise<StartChatResult> {\r\n    try {\r\n      if (!prompt || typeof prompt !== \"string\") {\r\n        throw new Error(\"Prompt must be a non-empty string.\");\r\n      }\r\n\r\n      if (session && !Array.isArray(session)) {\r\n        throw new Error(\"Session must be an array of CoreMessage.\");\r\n      }\r\n\r\n      if (session && session.length > 0) {\r\n        let messages: CoreMessage[] = [];\r\n\r\n        if (!media || media.inlineData === \"\") {\r\n          messages = [\r\n            ...session,\r\n            {\r\n              role: \"user\",\r\n              content: prompt,\r\n            },\r\n          ];\r\n        } else {\r\n          messages = [\r\n            ...session,\r\n            {\r\n              role: \"user\",\r\n              content: [\r\n                {\r\n                  type: \"text\",\r\n                  text: prompt,\r\n                },\r\n                {\r\n                  type: \"file\",\r\n                  data: media.inlineData,\r\n                  mimeType: media.mimeType || \"application/octet-stream\",\r\n                },\r\n              ],\r\n            },\r\n          ];\r\n        }\r\n\r\n        if (this.streamMethod === \"stream\") {\r\n          const textStream = await this.generateStream(messages);\r\n          return { textStream: textStream.textStream, response: textStream.response };\r\n        }\r\n\r\n        const { text, response } = await this.generateText({ messages });\r\n        return { text, response };\r\n      }\r\n\r\n      const greeting = user ? await this.getUserInfo(user) : \"\";\r\n      const fullPrompt = `${greeting} ${prompt}`;\r\n\r\n      if (this.streamMethod === \"stream\") {\r\n        const textStream = await this.generateStream([\r\n          {\r\n            role: \"user\",\r\n            content: fullPrompt,\r\n          },\r\n        ]);\r\n        return { textStream: textStream.textStream, response: textStream.response };\r\n      }\r\n\r\n      const { text, response } = await this.generateText({ prompt: fullPrompt });\r\n      return { text, response };\r\n\r\n    } catch (error) {\r\n      if (error instanceof Error && error.message.includes(\"Rate limit\")) {\r\n        Logger.warn(\"Rate limit exceeded, switching model...\");\r\n        this.model = this.init({\r\n          model: \"gemini-1.5-flash\", // Fallback model\r\n        });\r\n        return await this.startChat({ user, session, prompt }); // Retry with new model\r\n      }\r\n      throw new Error(`AI Agent test chat failed: ${error}`);\r\n    }\r\n  }\r\n}\r\n","import { terminalColors as TC } from \"@/utils/colors\";\r\nimport { Time } from \"@/utils/time\";\r\n\r\n\r\n\r\nexport class Logger {\r\n    private static log(type: \"DEBUG\" | \"WARN\" | \"ERROR\" | \"INFO\" | \"SUCCESS\", message: string, funcName?: string) {\r\n      const colorMap = {\r\n        DEBUG: TC.M,\r\n        WARN: TC.BY,\r\n        ERROR: TC.R,\r\n        INFO: TC.B,\r\n        SUCCESS: TC.G,\r\n      };\r\n      const color = colorMap[type] || TC.reset;\r\n      const currentTime = Time.getTimeToLogFormat();\r\n      const functionName = funcName ? `funcName: ${funcName}` : \"\";\r\n      const logMethod = type === \"ERROR\" || type === \"WARN\" ? console.log : type === \"INFO\" ? console.info : console.log;\r\n      logMethod(`${TC.dim}[${currentTime}]${TC.reset} ${color}[${type}]${TC.reset} ${functionName}: ${message}`);\r\n    }\r\n  \r\n    static success(message: string, funcName?: string) {\r\n      this.log(\"SUCCESS\", message, funcName);\r\n    }\r\n  \r\n    static error(message: string, funcName?: string) {\r\n      this.log(\"ERROR\", message, funcName);\r\n    }\r\n  \r\n    static warn(message: string, funcName?: string) {\r\n      this.log(\"WARN\", message, funcName);\r\n    }\r\n  \r\n    static info(message: string, funcName?: string) {\r\n      this.log(\"INFO\", message, funcName);\r\n    }\r\n  \r\n    static debug(message: string, funcName?: string) {\r\n      this.log(\"DEBUG\", message, funcName);\r\n    }\r\n    static custom(type: string, message: string, funcName?: string) {\r\n      const functionName = funcName ? `funcName: ${funcName}` : \"\"\r\n      const currentTime = Time.getTimeToLogFormat()\r\n      console.log(`${TC.dim}[${currentTime}]${TC.reset} ${TC.C}[${type}]${TC.reset} ${functionName}: ${message}`);\r\n    }\r\n  }\r\n  ","\r\nexport const terminalColors = {\r\n    reset: '\\x1b[0m',\r\n    bright: '\\x1b[1m',\r\n    dim: '\\x1b[2m',\r\n    underscore: '\\x1b[4m',\r\n    blink: '\\x1b[5m',\r\n    reverse: '\\x1b[7m',\r\n    hidden: '\\x1b[8m',\r\n\r\n    BLK: '\\x1b[30m',\r\n    R: '\\x1b[31m',\r\n    G: '\\x1b[32m',\r\n    Y: '\\x1b[33m',\r\n    B: '\\x1b[34m',\r\n    M: '\\x1b[35m',\r\n    C: '\\x1b[36m',\r\n    W: '\\x1b[37m',\r\n\r\n    BBLK: '\\x1b[40m',\r\n    BR: '\\x1b[41m',\r\n    BG: '\\x1b[42m',\r\n    BY: '\\x1b[43m',\r\n    BB: '\\x1b[44m',\r\n    BM: '\\x1b[45m',\r\n    BC: '\\x1b[46m',\r\n    BW: '\\x1b[47m'\r\n};","\r\nexport class Time {\r\n  private static formatDateToParts(\r\n    date: Date,\r\n    timeZone: string\r\n  ): { [key: string]: string } {\r\n    const formatter = new Intl.DateTimeFormat(\"id-ID\", {\r\n      timeZone,\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      hour12: false,\r\n    });\r\n\r\n    const formattedParts = formatter.formatToParts(date);\r\n    const dateParts: { [key: string]: string } = {};\r\n\r\n    formattedParts.forEach(({ type, value }) => {\r\n      dateParts[type] = value;\r\n    });\r\n\r\n    return dateParts;\r\n  }\r\n\r\n  private static formatDateString(dateParts: { [key: string]: string }): string {\r\n    return `${dateParts.year}-${dateParts.month}-${dateParts.day}T${dateParts.hour}:${dateParts.minute}:${dateParts.second}Z`;\r\n  }\r\n\r\n  private static logFormat(dateParts: { [key: string]: string }): string {\r\n    return `${dateParts.day}/${dateParts.month}/${dateParts.year}:${dateParts.hour}:${dateParts.minute}:${dateParts.second}`;\r\n  }\r\n  \r\n  public static formatDateToHumanReadable(\r\n    date: Date,\r\n    timeZone: string\r\n  ): string {\r\n    const dateParts = Time.formatDateToParts(date, timeZone);\r\n    return `${dateParts.day}/${dateParts.month}/${dateParts.year} ${dateParts.hour}:${dateParts.minute}:${dateParts.second}`;\r\n  }\r\n\r\n  \r\n\r\n  public static getCurrentTime(): Date {\r\n    const now = new Date();\r\n\r\n    const dateParts = Time.formatDateToParts(now, \"Asia/Jakarta\");\r\n    const formattedDateString = Time.formatDateString(dateParts);\r\n    return new Date(formattedDateString);\r\n  }\r\n\r\n  public static getCurrentTimeToString(): string {\r\n    const now = new Date();\r\n    const dateParts = Time.formatDateToParts(now, \"Asia/Jakarta\");\r\n    return Time.formatDateString(dateParts);\r\n  }\r\n\r\n  public static getCurrentTimeToHumanReadable(): string {\r\n    const now = new Date();\r\n    return Time.formatDateToHumanReadable(now, \"Asia/Jakarta\");\r\n  }\r\n\r\n  public static getTimeToLogFormat(): string {\r\n    const now = new Date();\r\n    const dateParts = Time.formatDateToParts(now, \"Asia/Jakarta\");\r\n    return Time.logFormat(dateParts);\r\n  }\r\n\r\n}\r\n","import * as crypto from \"crypto\";\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs\";\r\n\r\nimport { Logger } from \"@/utils/logger\";\r\nimport { mimeType } from \"@/utils/mimeType\";\r\nimport { FileDownloadInterface, FileInterface, FileStorageInterface } from \"@/types\";\r\n\r\n/** IOF (Input/Output File) class for handling file operations\r\n * - Calculates a SHA-256 hash of a given buffer.\r\n * - Provides a method to get the file path based on the hash.\r\n * - Allows setting a file location by saving the file and storing its metadata.\r\n * - Downloads a file from a URL and saves it to a specified path.\r\n * - Calculates the size of a file based on its buffer.\r\n * - Retrieves file paths based on hashes or buffers.\r\n * - Handles file storage operations using a repository pattern.\r\n * - Uses the FileStorageRepo for database interactions related to file storage.\r\n * - Uses the UserRepo for user-related database interactions.\r\n **/\r\nexport class IOF {\r\n\r\n  /**\r\n   * Creates a directory if it does not exist.\r\n   * @param dirPath - The path of the directory to create.\r\n   */\r\n  public static mkdir(dirPath: string): void {\r\n    try {\r\n      if (!fs.existsSync(dirPath)) {\r\n        Logger.info(`Creating directory: ${dirPath}`);\r\n        fs.mkdirSync(dirPath, { recursive: true });\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`Failed to create directory at ${dirPath}:  ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the SHA-256 hash of a given buffer.\r\n   * @param buffer - The buffer to hash.\r\n   * @returns The SHA-256 hash as a hexadecimal string.\r\n   */\r\n  public static calculateHashByBuffer(buffer: Buffer): string {\r\n    if (!Buffer.isBuffer(buffer)) {\r\n      throw new Error(\"Input must be a Buffer\");\r\n    }\r\n    if (buffer.length === 0) {\r\n      throw new Error(\"Buffer cannot be empty\");\r\n    }\r\n    return crypto.createHash(\"sha256\").update(buffer).digest(\"hex\");\r\n  }\r\n\r\n  /**\r\n   * Calculates the size of a file based on its buffer.\r\n   * @param buffer - The buffer representing the file.\r\n   * @returns The size of the file in bytes.\r\n   */\r\n  public static calculateSizeByBuffer(buffer: Buffer): number {\r\n    if (!Buffer.isBuffer(buffer)) {\r\n      throw new Error(\"Input must be a Buffer\");\r\n    }\r\n    if (buffer.length === 0) {\r\n      throw new Error(\"Buffer cannot be empty\");\r\n    }\r\n    return Buffer.byteLength(buffer);\r\n  }\r\n\r\n  /**\r\n   * Sets the file location by saving the file to the specified path and storing its metadata.\r\n   * @param data - The file data including the file buffer, name, and path.\r\n   * @returns The full path of the saved file or null if an error occurs.\r\n   */\r\n  public async setFileLocation(data: FileInterface): Promise<FileStorageInterface | null> {\r\n    const hash = IOF.calculateHashByBuffer(Buffer.from(data.file));\r\n    const size = IOF.calculateSizeByBuffer(Buffer.from(data.file));\r\n    const type = mimeType(data.name);\r\n\r\n    try {\r\n      const fullPath = path.join(process.cwd(), data.path, data.name);\r\n      const dir = path.dirname(fullPath);\r\n      IOF.mkdir(dir);\r\n      await fs.promises.writeFile(fullPath, data.file);\r\n\r\n      return {\r\n        filename: data.name,\r\n        fileuri: fullPath,\r\n        filehash: hash,\r\n        filesize: size,\r\n        filetype: type,\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Failed to set file location: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a file from a given URL and saves it to the specified download path.\r\n   * @param data - The file download data including the file URL and save path.\r\n   * @returns The metadata of the downloaded file.\r\n   */\r\n  public static async downloadFile(data: FileDownloadInterface): Promise<FileStorageInterface> {\r\n    try {\r\n      const response = await fetch(data.fileuri);\r\n      const buffer = await response.arrayBuffer();\r\n      const fileName = path.basename(data.fileuri);\r\n      const filePath = path.join(data.saveTo, fileName);\r\n      fs.writeFileSync(filePath, Buffer.from(buffer));\r\n      return {\r\n        filename: fileName,\r\n        fileuri: filePath,\r\n        filehash: IOF.calculateHashByBuffer(Buffer.from(buffer)),\r\n        filesize: IOF.calculateSizeByBuffer(Buffer.from(buffer)),\r\n        filetype: mimeType(fileName),\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Failed to download file: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the string content of a text file.\r\n   * @param filePath - The path to the text file.\r\n   * @returns A promise that resolves to the content of the file as a string.\r\n   * @throws An error if the file cannot be read.\r\n   */\r\n  public static async readTextFile(filePath: string): Promise<string> {\r\n    try {\r\n      const data = await fs.promises.readFile(filePath, \"utf-8\");\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to read file at ${filePath}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a file to a generative path format.\r\n   * @param fileName - The name of the file to convert.\r\n   * @returns An object containing the inline data with base64 encoded content and MIME type.\r\n   * @throws An error if the file cannot be read or converted.\r\n   */\r\n  public async fileToGenerativePath(fileName: string) {\r\n    try {\r\n      const mime = mimeType(fileName);\r\n      const file = await fs.promises.readFile(fileName);\r\n      return {\r\n        inlineData: {\r\n          data: Buffer.from(file).toString(\"base64\"),\r\n          mimeType: mime,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Failed to convert file to generative path: ${error}`);\r\n    }\r\n  }\r\n}\r\n","export function mimeType(fileName: string) {\r\n    const ext = fileName.split(\".\").pop();\r\n    switch (ext) {\r\n      // video\r\n      case \"mp4\":\r\n      case \"m4a\":\r\n      case \"m4b\":\r\n      case \"m4p\":\r\n      case \"m4r\":\r\n      case \"mpeg\":\r\n      case \"mpg\":\r\n      case \"mpe\":\r\n      case \"mpv\":\r\n      case \"mp2\":\r\n      case \"m2v\":\r\n      case \"m2ts\":\r\n      case \"mts\":\r\n      case \"tts\":\r\n      case \"m2t\":\r\n      case \"tsv\":\r\n      case \"tsa\":\r\n        return \"video/mpeg\";\r\n      case \"webm\":\r\n        return \"video/webm\";\r\n      case \"3gp\":\r\n        return \"video/3gpp\";\r\n      case \"mkv\":\r\n        return \"video/x-matroska\";\r\n      case \"avi\":\r\n        return \"video/x-msvideo\";\r\n      case \"mov\":\r\n        return \"video/quicktime\";\r\n      case \"wmv\":\r\n        return \"video/x-ms-wmv\";\r\n      case \"flv\":\r\n        return \"video/x-flv\";\r\n      case \"m4v\":\r\n        return \"video/x-m4v\";\r\n  \r\n      //  audio\r\n      case \"mp3\":\r\n        return \"audio/mpeg\";\r\n      case \"wav\":\r\n        return \"audio/wav\";\r\n      case \"ogg\":\r\n        return \"audio/ogg\";\r\n      case \"aac\":\r\n        return \"audio/aac\";\r\n      case \"flac\":\r\n        return \"audio/flac\";\r\n      case \"alac\":\r\n        return \"audio/alac\";\r\n  \r\n      // image\r\n      case \"jpg\":\r\n      case \"jpeg\":\r\n        return \"image/jpeg\";\r\n      case \"png\":\r\n        return \"image/png\";\r\n      case \"gif\":\r\n        return \"image/gif\";\r\n      case \"bmp\":\r\n        return \"image/bmp\";\r\n      case \"webp\":\r\n        return \"image/webp\";\r\n      case \"svg\":\r\n        return \"image/svg+xml\";\r\n      case \"ico\":\r\n        return \"image/x-icon\";\r\n      case \"tiff\":\r\n        return \"image/tiff\";\r\n      case \"psd\":\r\n        return \"image/vnd.adobe.photoshop\";\r\n      case \"ai\":\r\n        return \"application/postscript\";\r\n      case \"eps\":\r\n        return \"application/postscript\";\r\n      case \"indd\":\r\n        return \"application/x-indesign\";\r\n      case \"raw\":\r\n        return \"image/x-raw\";\r\n      case \"cr2\":\r\n        return \"image/x-canon-cr2\";\r\n      case \"nef\":\r\n        return \"image/x-nikon-nef\";\r\n      case \"orf\":\r\n        return \"image/x-olympus-orf\";\r\n      case \"rw2\":\r\n        return \"image/x-panasonic-rw2\";\r\n      case \"pef\":\r\n        return \"image/x-pentax-pef\";\r\n      case \"arw\":\r\n        return \"image/x-sony-arw\";\r\n      case \"dng\":\r\n        return \"image/x-adobe-dng\";\r\n      case \"x3f\":\r\n        return \"image/x-sigma-x3f\";\r\n      case \"cr3\":\r\n        return \"image/x-canon-cr3\";\r\n      case \"heic\":\r\n        return \"image/heic\";\r\n      case \"heif\":\r\n        return \"image/heif\";\r\n      case \"avif\":\r\n        return \"image/avif\";\r\n  \r\n      // application\r\n      case \"pdf\":\r\n        return \"application/pdf\";\r\n      case \"txt\":\r\n        return \"text/plain\";\r\n  \r\n      // text\r\n      case \"html\":\r\n        return \"text/html\";\r\n      case \"css\":\r\n        return \"text/css\";\r\n      case \"js\":\r\n        return \"application/javascript\";\r\n      case \"json\":\r\n        return \"application/json\";\r\n      case \"xml\":\r\n        return \"application/xml\";\r\n  \r\n      // archive\r\n      case \"zip\":\r\n        return \"application/zip\";\r\n      case \"rar\":\r\n        return \"application/x-rar-compressed\";\r\n      case \"7z\":\r\n        return \"application/x-7z-compressed\";\r\n      default:\r\n        return \"application/octet-stream\";\r\n    }\r\n  }","import { Logger } from \"@/utils/logger\";\r\nimport { Time } from \"@/utils/time\";\r\nimport { tool } from \"ai\";\r\nimport { z } from \"zod\";\r\n\r\nexport const TaskHandler = {\r\n    /**\r\n     * Get weather information for a specified city.\r\n     * This tool requires the city name to be provided.\r\n     */\r\n    getWeather: tool({\r\n        description: \"Get weather information for a specified city.\",\r\n        parameters: z.object({\r\n            city: z.string().min(1, \"City is required\").describe(\"Name of the city to get weather information for\"),\r\n        }),\r\n        execute: async ({ city }) => await Tools.getWeather({ city }),\r\n    }),\r\n    /**\r\n     * Get the current date and time in real-time.\r\n     * This tool does not require any parameters. It returns the current time in a standard format.\r\n     */\r\n    getCurrentTime: tool({\r\n        description: \"Get the current date and time in real-time. This tool does not require any parameters. It returns the current time in a standard format. Use this tool when user ask you for current time or date or anything that related to time.\",\r\n        parameters: z.object({}),\r\n        execute: async () => await Tools.getCurrentTime(),\r\n    }),\r\n}\r\n\r\n\r\nexport class Tools {\r\n\r\n    /**\r\n     * Retrieves the current time in a human-readable format.\r\n     * This tool does not require any parameters.\r\n     */\r\n    public static async getCurrentTime() {\r\n        Logger.info(\"Retrieving current time...\");\r\n        return Time.getCurrentTimeToHumanReadable()\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieves weather information for a specified city.\r\n     * This tool requires the city name to be provided.\r\n     */\r\n    public static async getWeather({ city }: { city: string }) {\r\n        if (!city) {\r\n            throw new Error(\"City must be provided.\");\r\n        }\r\n\r\n        Logger.info(`Retrieving weather for city: ${city}`);\r\n        // Simulate a weather response\r\n        const weather = {\r\n            city,\r\n            temperature: \"25°C\",\r\n            condition: \"Sunny\"\r\n        };\r\n\r\n        return weather;\r\n\r\n    }\r\n}","import crypto, { randomUUID } from \"crypto\";\r\n\r\n\r\nexport function HashWithSHA256(data: string): string {\r\n  return crypto.createHash(\"sha256\").update(data).digest(\"hex\");\r\n}\r\n\r\nexport function GenerateUUID(): string {\r\n  return randomUUID();\r\n}\r\n\r\nexport function GenerateRandomString(length: number): string {\r\n  return crypto.randomBytes(length).toString(\"hex\").slice(0, length);\r\n}","import * as rl from \"node:readline/promises\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nconst terminal = rl.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n  terminal: true,\r\n  completer: (line) => {\r\n    const completions = [\"help\", \"exit\", \"clear\"];\r\n    const hits = completions.filter((c) => c.startsWith(line));\r\n    return [hits.length ? hits : completions, line];\r\n  },\r\n});\r\n\r\nexport async function Question(question?: string): Promise<string> {\r\n  return terminal.question(question ? question + \": \" : \": \");\r\n}\r\n\r\nexport async function CloseTerminal() {\r\n  await terminal.close();\r\n  process.exit(0);\r\n}\r\n\r\nexport async function ClearTerminal() {\r\n  process.stdout.write(\"\\x1Bc\");\r\n  return terminal.prompt();\r\n}\r\n\r\nexport async function Help() {\r\n  console.log(`\r\nAvailable commands:\r\n  - help: Show this help message\r\n  - exit: Exit the terminal\r\n  - clear: Clear the terminal screen\r\n  `);\r\n  return terminal.prompt();\r\n}\r\n\r\n\r\n/**\r\n * Parses environment variables that start with a given prefix.\r\n * @param prefix The prefix to filter environment variables.\r\n * @returns An object containing arrays of keys and values.\r\n */\r\nexport function ParseEnvKeys(prefix: string): { keys: string[]; values: string[] } {\r\n  const envKeys = Object.keys(process.env).filter((key) =>\r\n    key.startsWith(prefix)\r\n  );\r\n  const keys: string[] = [];\r\n  const values: string[] = [];\r\n  \r\n  envKeys.forEach((key) => {\r\n    if (process.env[key]) {\r\n      keys.push(key);\r\n      values.push(process.env[key]!);\r\n    }\r\n  });\r\n\r\n  return { keys, values };\r\n}\r\n"],"mappings":"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","names":["z","z","openAIModel","text","response","crypto"]}